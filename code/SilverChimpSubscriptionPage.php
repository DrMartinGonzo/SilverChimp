<?php
require_once('MCAPI.class.php');
/**
 * SilverChimp Page object 
 * @author Matt Cockayne <matt@zucchi.co.uk>
 * @package SilverChimp 
 */
class SilverChimpSubscriptionPage extends Page {

    /**
     * Definition of additional data fields required for SilverChimp
     * @var array
     */
    static $db = array(
        'ListID'            => 'Varchar(50)',    //    list_unique_id
        'SubscribeSuccess' => 'HTMLtext',
    );

    /**
     * Add SilverShimp Specific fields to administration area
     * @see Page::getCMSFields()
     */
    function getCMSFields() {
        $fields = parent::getCMSFields();
        
        $api_key = SilverChimpSettings::$api_key;
        if ($api_key && strlen($api_key)) {
            $api = new MCAPI($api_key, SilverChimpSettings::$secure_connection);
            $lists = $api->lists();
            
            $listSource = array();
            foreach ($lists['data'] AS $l) {
                $listSource[$l['id']] = $l['name'];
            }
            
            
            $settingsTab = 'Root.Content.ChimpSettings';
            $fields->findOrMakeTab($settingsTab);
            
            $message = "<p>";
            $message .= _t('SilverChimp.SETTINGSNOTE', "You must save your changes to display/update the Chimp Fields tab");
            $message .=  "</p>";
            
            $fields->addFieldsToTab($settingsTab,array(
                new DropdownField('ListID', _t('SilverChimp.LISTLABEL', 'Select the list you wish to use'),$listSource),
                new LiteralField("ChimpFieldsInto", $message),
                new HtmlEditorField('SubscribeSuccess', _t('SilverChimp.SUBSCRIBESUCCESS', 'Enter something to display when a subscription has been sucessful'))
            ));
            
            
            if ($this->ListID && strlen($this->ListID)) {
                
                $mergeVars = $api->listMergeVars($this->ListID);

                $fieldsTab = 'Root.Content.ChimpFields';
                $fields->findOrMakeTab($fieldsTab);
                
                $message = "<p>";
                $message .= _t('SilverChimp.FIELDSINTRO', "These fields have been generated by Mail Chimp and will be used in your subscription form");
                $message .=  "</p>";
                $fields->addFieldsToTab($fieldsTab, new LiteralField("ChimpFieldsInto", $message));
                
                foreach ($mergeVars as $var) {
                    $fields->addFieldToTab($fieldsTab, new ReadonlyField('SC-' . $var['tag'], $var['tag'], $var['name'] , ' (' . $var['field_type'] . ')'));
                } 
            }
    
            $this->extend('updateSilverChimpCMSFields');
        }

        return $fields;
    }
}

/**
 * SilverChimp page controller
 * @author Matt Cockayne <matt@zucchi.co.uk>
 * @package SilverChimp
 */
class SilverChimpSubscriptionPage_Controller extends Page_Controller {

    /**
     * The MailChimp API wrapper
     * @var MCAPI
     */
    protected $api = null;
    
    /**
     * initialise the mailchimp api
     * @see ContentController::init()
     */
    public function init()
    {
        parent::init();
        $this->api = new MCAPI(SilverChimpSettings::$api_key,SilverChimpSettings::$secure_connection);
    }
    
    /**
     * Build a form
     * @return boolean|Form
     */
    function Form() {
        if (Session::get('SilverChimp.SUCCESS')) {
            Session::clear('SilverChimp.SUCCESS');
            return false;
        }

        $mergeVars = $this->api->listMergeVars($this->ListID);
        $fields = array();
        $required = array();
        
        foreach ($mergeVars AS $var) {
            if ($new = $this->buildField($var)) {
                if (is_array($new)) {
                    $fields = array_merge($fields, $new);
                } else {
                    $fields[] = $new;
                }
                
                if ($var['req']) {
                    $required[] = $var['tag'];
                }
                
            }
        }
        
        $form = new Form($this, 'Form',
            new FieldSet($fields),
            new FieldSet(new FormAction('SubscribeAction', 'Subscribe')),
            new RequiredFields($required)
        );

        $this->extend('updateSilverChimpForm', $form);

        return $form;
    }

    /**
     * Method to override page content with message on success
     * @return SilverChimpSubscriptionPage_Controller
     */
    public function subscribeSuccess() {
        if (Session::get('SilverChimp.SUCCESS'))
            $this->Content = $this->subscribeSuccess;
        return $this;
    }

    /**
     * Action to process subscriptions
     * @param array $raw_data
     * @param Form $form
     * @return SilverChimpSubscriptionPage_Controller
     */
    function SubscribeAction($raw_data, $form) {
        $data = Convert::raw2sql($raw_data);

        $mergeVars = $this->api->listMergeVars($this->ListID);
        $postedVars = array();
        foreach ($mergeVars AS $var) {
            if (isset($data[$var['tag']])) {
                $postedVars[$var['tag']] = $data[$var['tag']];
            }
        }
        $this->extend('updateSilverChimpSignupAction', $data, $mergeVars);

        $result = $this->api->listSubscribe(
            $this->ListID, 
            $postedVars['EMAIL'], 
            $postedVars, 
            SilverChimpSettings::$email_type,
            SilverChimpSettings::$double_opt_in,
            false, // update_existing - not implemented
            false,  // replace_interested - not implemented
            SilverChimpSettings::$send_welcome
        );
        
        if (true === $result) {
            //    success!
            Session::set('SilverChimp.SUCCESS', true);
            return $this->subscribeSuccess();
            
        } else {
            //    failure!
            $form->sessionMessage($api->errorMessage, 'warning');
            return $this;
        }
    }

    /**
     * parse merge var array and build appropriate field
     * 
     * @todo: add more support for all mailchip fields as limited functionality currently implemented
     * @param array $var
     * @return mixed
     */
    protected function buildField($var)
    {
        if ($var['public']) {
            switch ($var['field_type']) {
                case 'email':
                    return new EmailField($var['tag'], $var['name']);
                    break;
                case 'dropdown':
                    return new DropdownField($var['tag'],$var['name'], $var['choices']);
                    break;
                case 'radio':
                        return new OptionsetField($var['tag'],$var['name'], $var['choices']);
                        break;
                case 'date':
                case 'birthday':
                        return new DateField($var['tag'],$var['name']);
                    break;
                case 'address':
                    return array(
                        new TextField($var['tag'].'-1', _t('SilverChimp.ADDRESS1', 'Street Address')),
                        new TextField($var['tag'].'-2', _t('SilverChimp.ADDRESS2', 'Address Line 2')),
                        new TextField($var['tag'].'-3', _t('SilverChimp.ADDRESS3', 'City')),
                        new TextField($var['tag'].'-4', _t('SilverChimp.ADDRESS4', 'State/Province/Region')),
                        new TextField($var['tag'].'-5', _t('SilverChimp.ADDRESS5', 'Postal/Zip Code')),
                        new CountryDropdownField($var['tag'].'-6', _t('SilverChimp.COUNTRY', 'Postal/Zip Code')),
                    );    
                    break;
                case 'zip':
                    return new TextField($var['tag'].'-5', _t('SilverChimp.ADDRESS5', 'Postal/Zip Code'));
                    break;
                case 'phone':
                        return new PhoneNumberField($var['tag'], $var['name']);
                        break;
                case 'number':
                            return new NumericField($var['tag'], $var['name']);
                            break;
                case 'website':
                case 'imageurl':
                case 'text':
                    return new TextField($var['tag'], $var['name']);
                    break;
            }
        }
        
        return false;
    }
}

